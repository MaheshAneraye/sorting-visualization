name: Docker Image CI and Deploy

on:
  push:
    branches:
       - test
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # Install OWASP Dependency-Check
    - name: Install OWASP Dependency-Check
      run: |
        VERSION=$(curl -s https://jeremylong.github.io/DependencyCheck/current.txt)
        curl -sL "https://github.com/jeremylong/DependencyCheck/releases/download/v$VERSION/dependency-check-$VERSION-release.zip" --output dependency-check.zip
        unzip dependency-check.zip

    # Run OWASP Dependency-Check
    - name: Run OWASP Dependency-Check
      run: |
        dependency-check --project "Sorting Visualization" --scan . --out ./dependency-check-report
        cat ./dependency-check-report/dependency-check-report.html
    # Install SonarQube Scanner
    - name: Install SonarQube Scanner
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-4.7.0.2740-linux.zip
        unzip sonar-scanner-4.7.0.2740-linux.zip
        sudo mv sonar-scanner-4.7.0.2740-linux /usr/local/sonar-scanner
        echo "export PATH=\$PATH:/usr/local/sonar-scanner/bin" >> $GITHUB_ENV

    # Run SonarQube Analysis
    - name: Run SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        sonar-scanner \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
    
    # Set up Docker Buildx for building multi-platform images (optional, but recommended)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    # Set a unique image tag using GitHub Actions run number
    - name: Set image tag (run number-based)
      id: vars
      run: echo "::set-output name=image_tag::sorting-${{ github.run_number }}"

    # Build the Docker image
    - name: Build the Docker image
      run: |
        IMAGE_TAG=${{ steps.vars.outputs.image_tag }}
        docker build . --file Dockerfile --tag $IMAGE_TAG

    # Tag the Docker image with the Docker Hub repository and push it to Docker Hub
    - name: Tag and Push Docker image to Docker Hub
      run: |
        IMAGE_TAG=${{ steps.vars.outputs.image_tag }}
        docker tag $IMAGE_TAG ${{ secrets.DOCKER_HUB_USERNAME }}/sorting-${{ github.run_number }}:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/sorting-${{ github.run_number }}:latest

    # Install Trivy
    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.56.2_Linux-64bit.tar.gz
        tar zxvf trivy_0.56.2_Linux-64bit.tar.gz
        sudo mv trivy /usr/local/bin/
        trivy --version # To verify installation
        
    # Run Trivy scan
    - name: Run Trivy scan
      run: |
        trivy image --severity HIGH,CRITICAL ${{ secrets.DOCKER_HUB_USERNAME }}/sorting-${{ github.run_number }}:latest

    # Start the SSH agent and add the SSH private key
    - name: Start SSH Agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # SSH into Swarm Manager and Deploy the service on Docker Swarm
    - name: Deploy Docker service on Swarm Manager
      run: |
        echo "Deploying Docker service on Swarm Manager..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SWARM_MANAGER_IP }} \
        "sudo docker service update --image ${{ secrets.DOCKER_HUB_USERNAME }}/sorting-${{ github.run_number }}:latest my-service || \
         sudo docker service create --name my-service --replicas 3 -p 3000:3000 ${{ secrets.DOCKER_HUB_USERNAME }}/sorting-${{ github.run_number }}:latest"
        echo "You can access the cluster at http://<your-cluster-url>:3000"

    # Verify that the service is running after deployment
    - name: Verify Docker service status
      run: |
        echo "Checking the status of the Docker service..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SWARM_MANAGER_IP }} \
        "sudo docker service ls"

