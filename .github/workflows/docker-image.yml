name: Docker Image CI and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Set up Docker Buildx for building multi-platform images (optional, but recommended)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    # Set a unique image tag using GitHub Actions run number
    - name: Set image tag (run number-based)
      id: vars
      run: echo "::set-output name=image_tag::sorting-${{ github.run_number }}"

    # Build the Docker image
    - name: Build the Docker image
      run: |
        IMAGE_TAG=${{ steps.vars.outputs.image_tag }}
        docker build . --file Dockerfile --tag $IMAGE_TAG

    # Tag the Docker image with the Docker Hub repository and push it to Docker Hub
    - name: Tag and Push Docker image to Docker Hub
      run: |
        IMAGE_TAG=${{ steps.vars.outputs.image_tag }}
        docker tag $IMAGE_TAG ${{ secrets.DOCKER_HUB_USERNAME }}/sorting-${{ github.run_number }}:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/sorting-${{ github.run_number }}:latest

    # SSH into Swarm Manager and Deploy the service on Docker Swarm
    - name: SSH into Swarm Manager and Deploy
      uses: appleboy/ssh-action@v0.1.3
      with:
        host: ${{ secrets.SWARM_MANAGER_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "Deploying Docker service on Swarm Manager..."
          docker service update --image ${{ secrets.DOCKER_HUB_USERNAME }}/sorting-${{ github.run_number }}:latest my-service || \
          docker service create --name my-service --replicas 3 -p 3000:3000 ${{ secrets.DOCKER_HUB_USERNAME }}/sorting-${{ github.run_number }}:latest

    # Verify that the service is running after deployment
    - name: Verify Docker service status
      uses: appleboy/ssh-action@v0.1.3
      with:
        host: ${{ secrets.SWARM_MANAGER_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "Checking the status of the Docker service..."
          docker service ls
