name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    - name: Set image tag (run number-based)
      id: vars
      run: echo "::set-output name=image_tag::sorting-${{ github.run_number }}"

    - name: Build the Docker image
      run: |
        IMAGE_TAG=${{ steps.vars.outputs.image_tag }}
        docker build . --file Dockerfile --tag $IMAGE_TAG

    - name: Tag the Docker image for Docker Hub
      run: |
        IMAGE_TAG=${{ steps.vars.outputs.image_tag }}
        docker tag $IMAGE_TAG ${{ secrets.DOCKER_HUB_USERNAME }}/$IMAGE_TAG:latest

    - name: Push the Docker image to Docker Hub
      run: |
        IMAGE_TAG=${{ steps.vars.outputs.image_tag }}
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/$IMAGE_TAG:latest

    # Deploy to EC2
    - name: Deploy to EC2
      env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOSTNAME: ${{secrets.EC2_IP}}
          USER_NAME: ${{secrets.EC2_USER}}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} << 'EOF'
          echo "Pulling Docker image from Docker Hub..."
          docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" -p "${{ secrets.DOCKER_HUB_PASSWORD }}"
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/sorting-${{ github.run_number }}:latest

          echo "Stopping and removing old container if exists..."
          docker stop my-container || true && docker rm my-container || true

          echo "Running the new container..."
          docker run -d --name my-container -p 80:80 ${{ secrets.DOCKER_HUB_USERNAME }}/sorting-${{ github.run_number }}:latest
        EOF

    - name: Retrieve EC2 Public IP
      run: echo "Application is running at http://${{ secrets.EC2_IP }}"
